@page "/"

<PageTitle>Index</PageTitle>

<h1>Generate random nickname</h1>

The nickname generator creates nicknames in English, from 3 to 15 letters long.<br/>
You can set the first letter of generated nickname.

   
<br/>
@if (Settings.IsDroplist) {
    <select style ="margin-top: 5px;
                    margin-right: 5px;"
    @bind="Nickname.Start">
    <option value=""></option>
    @foreach (var let in letterList)
    {
        <option value="@let">@let</option>
    }
</select>
}
else {
<input style ="margin-top: 5px;
               margin-bottom: 5px;"
       @bind-value="Nickname.Start" firstletters="Letters with which the generated nickname will begin" />
}

<br/>
<button
    style ="margin-top: 2px;
            margin-bottom: 2px;"
    @onclick="GenerateNickname">Generate</button> 
<p>Your new nickname is: @Nickname.Generated</p>

@code {
    public bool IsConsonant;

    public class Nickname
    {
        public static string? Start { get; set; }
        public static string? Generated;
        public static string? GeneratedPart;

    }

    List<char> letterList = new()
    {
        'a',
        'b',
        'c',
        'd',
        'e',
        'f',
        'g',
        'h',
        'i',
        'j',
        'k',
        'l',
        'm',
        'n',
        'o',
        'p',
        'q',
        'r',
        's',
        't',
        'u',
        'v',
        'w',
        'x',
        'y',
        'z'
};
    List<char> vowelList = new List<char>
    {
        'a',
        'e',
        'i',
        'o',
        'u',
        'y'
    };
    List<char> consonantList = new List<char>
    {
        'b',
        'c',
        'd',
        'f',
        'g',
        'h',
        'j',
        'k',
        'l',
        'm',
        'n',
        'p',
        'q',
        'r',
        's',
        't',
        'v',
        'w',
        'x',
        'y',
        'z'
    };

    void GenerateNickname()
    {
        Random rand = new Random();
        Nickname.GeneratedPart = null;
        
        foreach (var start in consonantList)
        {
            if (Nickname.Start != null)
            {
                char end = Nickname.Start[Nickname.Start.Length - 1];
                if (end == start)
                {
                    IsConsonant = true;
                }
            }
        }
        foreach (var start in vowelList)
        {
            if (Nickname.Start != null)
            {
                char end = Nickname.Start[Nickname.Start.Length - 1];
                if (end == start)
                {
                    IsConsonant = false;
                }
            }
        }
        
        
            if(IsConsonant == false)
        {
                for (int repeatIndex = 1; repeatIndex <= 4; repeatIndex++)
            {
                var j = rand.Next(20);
                Nickname.GeneratedPart += consonantList[j];
                var i = rand.Next(6);
                Nickname.GeneratedPart += vowelList[i];

            }
            
        }
            else
            {
                for (int repeatIndex = 1; repeatIndex <= 4; repeatIndex++)
                {
                    var i = rand.Next(6);
                    Nickname.GeneratedPart += vowelList[i];
                    var j = rand.Next(20);
                    Nickname.GeneratedPart += consonantList[j];
                }
            }

            Nickname.Generated = Nickname.Start + Nickname.GeneratedPart;
    }
}
